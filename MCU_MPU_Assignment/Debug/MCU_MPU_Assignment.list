
MCU_MPU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd8  08003fd8  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08003fd8  08003fd8  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fd8  08003fd8  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08003fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000044  08004024  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004024  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102ee  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261b  00000000  00000000  0003035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00032978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00033790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fa7  00000000  00000000  00034490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103f3  00000000  00000000  0004c437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1c0  00000000  00000000  0005c82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e79ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003830  00000000  00000000  000e7a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f44 	.word	0x08003f44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08003f44 	.word	0x08003f44

0800014c <fsm_automatic>:
#include "input_reading.h"
#include "uart.h"

int t_road_1 = 0, t_road_2 = 0;

void fsm_automatic() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b81      	ldr	r3, [pc, #516]	; (8000358 <fsm_automatic+0x20c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	2b05      	cmp	r3, #5
 8000158:	f200 80f2 	bhi.w	8000340 <fsm_automatic+0x1f4>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000185 	.word	0x08000185
 800016c:	080001d3 	.word	0x080001d3
 8000170:	08000231 	.word	0x08000231
 8000174:	0800028b 	.word	0x0800028b
 8000178:	080002db 	.word	0x080002db
		case INIT:
			status = MODE1;
 800017c:	4b76      	ldr	r3, [pc, #472]	; (8000358 <fsm_automatic+0x20c>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
			break;
 8000182:	e0e6      	b.n	8000352 <fsm_automatic+0x206>
		case MODE1:
			led_config();
 8000184:	f000 f9ca 	bl	800051c <led_config>
			t_road_1 = T_RED;
 8000188:	4b74      	ldr	r3, [pc, #464]	; (800035c <fsm_automatic+0x210>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a74      	ldr	r2, [pc, #464]	; (8000360 <fsm_automatic+0x214>)
 800018e:	6013      	str	r3, [r2, #0]
			t_road_2 = T_GREEN;
 8000190:	4b74      	ldr	r3, [pc, #464]	; (8000364 <fsm_automatic+0x218>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a74      	ldr	r2, [pc, #464]	; (8000368 <fsm_automatic+0x21c>)
 8000196:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, "!_____MODE1_____#\n\r", 20, 50);
 8000198:	2332      	movs	r3, #50	; 0x32
 800019a:	2214      	movs	r2, #20
 800019c:	4973      	ldr	r1, [pc, #460]	; (800036c <fsm_automatic+0x220>)
 800019e:	4874      	ldr	r0, [pc, #464]	; (8000370 <fsm_automatic+0x224>)
 80001a0:	f003 f8d0 	bl	8003344 <HAL_UART_Transmit>
			disp_time_uart(t_road_1, t_road_2);
 80001a4:	4b6e      	ldr	r3, [pc, #440]	; (8000360 <fsm_automatic+0x214>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a6f      	ldr	r2, [pc, #444]	; (8000368 <fsm_automatic+0x21c>)
 80001aa:	6812      	ldr	r2, [r2, #0]
 80001ac:	4611      	mov	r1, r2
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 f8fe 	bl	80013b0 <disp_time_uart>
			setTimer4(1000);
 80001b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b8:	f001 f822 	bl	8001200 <setTimer4>
			buzzer_period=500;
 80001bc:	4b6d      	ldr	r3, [pc, #436]	; (8000374 <fsm_automatic+0x228>)
 80001be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001c2:	601a      	str	r2, [r3, #0]
			volume = 20;
 80001c4:	4b6c      	ldr	r3, [pc, #432]	; (8000378 <fsm_automatic+0x22c>)
 80001c6:	2214      	movs	r2, #20
 80001c8:	601a      	str	r2, [r3, #0]
			status = RED_GREEN;
 80001ca:	4b63      	ldr	r3, [pc, #396]	; (8000358 <fsm_automatic+0x20c>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	601a      	str	r2, [r3, #0]
			break;
 80001d0:	e0bf      	b.n	8000352 <fsm_automatic+0x206>
		case RED_GREEN:
			led_config();
 80001d2:	f000 f9a3 	bl	800051c <led_config>
			if (timer4_flag == 1) {
 80001d6:	4b69      	ldr	r3, [pc, #420]	; (800037c <fsm_automatic+0x230>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	f040 80b2 	bne.w	8000344 <fsm_automatic+0x1f8>
				t_road_1--;
 80001e0:	4b5f      	ldr	r3, [pc, #380]	; (8000360 <fsm_automatic+0x214>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	3b01      	subs	r3, #1
 80001e6:	4a5e      	ldr	r2, [pc, #376]	; (8000360 <fsm_automatic+0x214>)
 80001e8:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80001ea:	4b5f      	ldr	r3, [pc, #380]	; (8000368 <fsm_automatic+0x21c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	3b01      	subs	r3, #1
 80001f0:	4a5d      	ldr	r2, [pc, #372]	; (8000368 <fsm_automatic+0x21c>)
 80001f2:	6013      	str	r3, [r2, #0]
				if (t_road_2 <= 0) { // next state pre-setup
 80001f4:	4b5c      	ldr	r3, [pc, #368]	; (8000368 <fsm_automatic+0x21c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	dc0c      	bgt.n	8000216 <fsm_automatic+0xca>
					t_road_2 = T_AMBER;
 80001fc:	4b60      	ldr	r3, [pc, #384]	; (8000380 <fsm_automatic+0x234>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a59      	ldr	r2, [pc, #356]	; (8000368 <fsm_automatic+0x21c>)
 8000202:	6013      	str	r3, [r2, #0]
					buzzer_period = 75;
 8000204:	4b5b      	ldr	r3, [pc, #364]	; (8000374 <fsm_automatic+0x228>)
 8000206:	224b      	movs	r2, #75	; 0x4b
 8000208:	601a      	str	r2, [r3, #0]
					volume = 100;
 800020a:	4b5b      	ldr	r3, [pc, #364]	; (8000378 <fsm_automatic+0x22c>)
 800020c:	2264      	movs	r2, #100	; 0x64
 800020e:	601a      	str	r2, [r3, #0]
					status = RED_AMBER; // Change state
 8000210:	4b51      	ldr	r3, [pc, #324]	; (8000358 <fsm_automatic+0x20c>)
 8000212:	2202      	movs	r2, #2
 8000214:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 8000216:	4b52      	ldr	r3, [pc, #328]	; (8000360 <fsm_automatic+0x214>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a53      	ldr	r2, [pc, #332]	; (8000368 <fsm_automatic+0x21c>)
 800021c:	6812      	ldr	r2, [r2, #0]
 800021e:	4611      	mov	r1, r2
 8000220:	4618      	mov	r0, r3
 8000222:	f001 f8c5 	bl	80013b0 <disp_time_uart>
				setTimer4(1000);
 8000226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022a:	f000 ffe9 	bl	8001200 <setTimer4>
			}
			break;
 800022e:	e089      	b.n	8000344 <fsm_automatic+0x1f8>
		case RED_AMBER:
			led_config();
 8000230:	f000 f974 	bl	800051c <led_config>
			if (timer4_flag == 1) {
 8000234:	4b51      	ldr	r3, [pc, #324]	; (800037c <fsm_automatic+0x230>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b01      	cmp	r3, #1
 800023a:	f040 8085 	bne.w	8000348 <fsm_automatic+0x1fc>
				t_road_1--;
 800023e:	4b48      	ldr	r3, [pc, #288]	; (8000360 <fsm_automatic+0x214>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	3b01      	subs	r3, #1
 8000244:	4a46      	ldr	r2, [pc, #280]	; (8000360 <fsm_automatic+0x214>)
 8000246:	6013      	str	r3, [r2, #0]
				t_road_2--;
 8000248:	4b47      	ldr	r3, [pc, #284]	; (8000368 <fsm_automatic+0x21c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a46      	ldr	r2, [pc, #280]	; (8000368 <fsm_automatic+0x21c>)
 8000250:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 8000252:	4b43      	ldr	r3, [pc, #268]	; (8000360 <fsm_automatic+0x214>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	dc0a      	bgt.n	8000270 <fsm_automatic+0x124>
					t_road_1 = T_GREEN;
 800025a:	4b42      	ldr	r3, [pc, #264]	; (8000364 <fsm_automatic+0x218>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a40      	ldr	r2, [pc, #256]	; (8000360 <fsm_automatic+0x214>)
 8000260:	6013      	str	r3, [r2, #0]
					t_road_2 = T_RED;
 8000262:	4b3e      	ldr	r3, [pc, #248]	; (800035c <fsm_automatic+0x210>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a40      	ldr	r2, [pc, #256]	; (8000368 <fsm_automatic+0x21c>)
 8000268:	6013      	str	r3, [r2, #0]
					status = GREEN_RED; // Change state
 800026a:	4b3b      	ldr	r3, [pc, #236]	; (8000358 <fsm_automatic+0x20c>)
 800026c:	2203      	movs	r2, #3
 800026e:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 8000270:	4b3b      	ldr	r3, [pc, #236]	; (8000360 <fsm_automatic+0x214>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a3c      	ldr	r2, [pc, #240]	; (8000368 <fsm_automatic+0x21c>)
 8000276:	6812      	ldr	r2, [r2, #0]
 8000278:	4611      	mov	r1, r2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 f898 	bl	80013b0 <disp_time_uart>
				setTimer4(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f000 ffbc 	bl	8001200 <setTimer4>
			}
			break;
 8000288:	e05e      	b.n	8000348 <fsm_automatic+0x1fc>
		case GREEN_RED:
			led_config();
 800028a:	f000 f947 	bl	800051c <led_config>
			if (timer4_flag == 1) {
 800028e:	4b3b      	ldr	r3, [pc, #236]	; (800037c <fsm_automatic+0x230>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d15a      	bne.n	800034c <fsm_automatic+0x200>
				t_road_1--;
 8000296:	4b32      	ldr	r3, [pc, #200]	; (8000360 <fsm_automatic+0x214>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	3b01      	subs	r3, #1
 800029c:	4a30      	ldr	r2, [pc, #192]	; (8000360 <fsm_automatic+0x214>)
 800029e:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80002a0:	4b31      	ldr	r3, [pc, #196]	; (8000368 <fsm_automatic+0x21c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3b01      	subs	r3, #1
 80002a6:	4a30      	ldr	r2, [pc, #192]	; (8000368 <fsm_automatic+0x21c>)
 80002a8:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 80002aa:	4b2d      	ldr	r3, [pc, #180]	; (8000360 <fsm_automatic+0x214>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	dc06      	bgt.n	80002c0 <fsm_automatic+0x174>
					t_road_1 = T_AMBER;
 80002b2:	4b33      	ldr	r3, [pc, #204]	; (8000380 <fsm_automatic+0x234>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a2a      	ldr	r2, [pc, #168]	; (8000360 <fsm_automatic+0x214>)
 80002b8:	6013      	str	r3, [r2, #0]
					status = AMBER_RED; // Change state
 80002ba:	4b27      	ldr	r3, [pc, #156]	; (8000358 <fsm_automatic+0x20c>)
 80002bc:	2204      	movs	r2, #4
 80002be:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 80002c0:	4b27      	ldr	r3, [pc, #156]	; (8000360 <fsm_automatic+0x214>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a28      	ldr	r2, [pc, #160]	; (8000368 <fsm_automatic+0x21c>)
 80002c6:	6812      	ldr	r2, [r2, #0]
 80002c8:	4611      	mov	r1, r2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 f870 	bl	80013b0 <disp_time_uart>
				setTimer4(1000);
 80002d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d4:	f000 ff94 	bl	8001200 <setTimer4>
			}
			break;
 80002d8:	e038      	b.n	800034c <fsm_automatic+0x200>
		case AMBER_RED:
			led_config();
 80002da:	f000 f91f 	bl	800051c <led_config>
			if (timer4_flag == 1) {
 80002de:	4b27      	ldr	r3, [pc, #156]	; (800037c <fsm_automatic+0x230>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d134      	bne.n	8000350 <fsm_automatic+0x204>
				t_road_1--;
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <fsm_automatic+0x214>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	3b01      	subs	r3, #1
 80002ec:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <fsm_automatic+0x214>)
 80002ee:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <fsm_automatic+0x21c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	3b01      	subs	r3, #1
 80002f6:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <fsm_automatic+0x21c>)
 80002f8:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 80002fa:	4b19      	ldr	r3, [pc, #100]	; (8000360 <fsm_automatic+0x214>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	dc11      	bgt.n	8000326 <fsm_automatic+0x1da>
					t_road_1 = T_RED;
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <fsm_automatic+0x210>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a16      	ldr	r2, [pc, #88]	; (8000360 <fsm_automatic+0x214>)
 8000308:	6013      	str	r3, [r2, #0]
					t_road_2 = T_GREEN;
 800030a:	4b16      	ldr	r3, [pc, #88]	; (8000364 <fsm_automatic+0x218>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a16      	ldr	r2, [pc, #88]	; (8000368 <fsm_automatic+0x21c>)
 8000310:	6013      	str	r3, [r2, #0]
					buzzer_period=500;
 8000312:	4b18      	ldr	r3, [pc, #96]	; (8000374 <fsm_automatic+0x228>)
 8000314:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000318:	601a      	str	r2, [r3, #0]
					volume = 20;
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <fsm_automatic+0x22c>)
 800031c:	2214      	movs	r2, #20
 800031e:	601a      	str	r2, [r3, #0]
					status = RED_GREEN; // Change state
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <fsm_automatic+0x20c>)
 8000322:	2201      	movs	r2, #1
 8000324:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <fsm_automatic+0x214>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <fsm_automatic+0x21c>)
 800032c:	6812      	ldr	r2, [r2, #0]
 800032e:	4611      	mov	r1, r2
 8000330:	4618      	mov	r0, r3
 8000332:	f001 f83d 	bl	80013b0 <disp_time_uart>
				setTimer4(1000);
 8000336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033a:	f000 ff61 	bl	8001200 <setTimer4>
			}
			break;
 800033e:	e007      	b.n	8000350 <fsm_automatic+0x204>
		default:
			break;
 8000340:	bf00      	nop
 8000342:	e006      	b.n	8000352 <fsm_automatic+0x206>
			break;
 8000344:	bf00      	nop
 8000346:	e004      	b.n	8000352 <fsm_automatic+0x206>
			break;
 8000348:	bf00      	nop
 800034a:	e002      	b.n	8000352 <fsm_automatic+0x206>
			break;
 800034c:	bf00      	nop
 800034e:	e000      	b.n	8000352 <fsm_automatic+0x206>
			break;
 8000350:	bf00      	nop
	}
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	2000000c 	.word	0x2000000c
 800035c:	20000000 	.word	0x20000000
 8000360:	20000060 	.word	0x20000060
 8000364:	20000008 	.word	0x20000008
 8000368:	20000064 	.word	0x20000064
 800036c:	08003f5c 	.word	0x08003f5c
 8000370:	2000014c 	.word	0x2000014c
 8000374:	20000014 	.word	0x20000014
 8000378:	20000018 	.word	0x20000018
 800037c:	200000b0 	.word	0x200000b0
 8000380:	20000004 	.word	0x20000004

08000384 <fsm_red_manual>:
#include "global.h"
#include "fsm_manual.h"
#include "timer.h"
#include "uart.h"

void fsm_red_manual() {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	switch(status) {
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <fsm_red_manual+0x78>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b07      	cmp	r3, #7
 800038e:	d023      	beq.n	80003d8 <fsm_red_manual+0x54>
 8000390:	2b07      	cmp	r3, #7
 8000392:	dc2c      	bgt.n	80003ee <fsm_red_manual+0x6a>
 8000394:	2b05      	cmp	r3, #5
 8000396:	d002      	beq.n	800039e <fsm_red_manual+0x1a>
 8000398:	2b06      	cmp	r3, #6
 800039a:	d012      	beq.n	80003c2 <fsm_red_manual+0x3e>
				toggle_red();
				setTimer1(500);
			}
			break;
		default:
			break;
 800039c:	e027      	b.n	80003ee <fsm_red_manual+0x6a>
			led_config();
 800039e:	f000 f8bd 	bl	800051c <led_config>
			setTimer1(500);
 80003a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a6:	f000 ff11 	bl	80011cc <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE2_____#\n\r", 20, 50);
 80003aa:	2332      	movs	r3, #50	; 0x32
 80003ac:	2214      	movs	r2, #20
 80003ae:	4914      	ldr	r1, [pc, #80]	; (8000400 <fsm_red_manual+0x7c>)
 80003b0:	4814      	ldr	r0, [pc, #80]	; (8000404 <fsm_red_manual+0x80>)
 80003b2:	f002 ffc7 	bl	8003344 <HAL_UART_Transmit>
			disp_t_red_uart();
 80003b6:	f000 ffe9 	bl	800138c <disp_t_red_uart>
			status = AUTO_RED;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <fsm_red_manual+0x78>)
 80003bc:	2206      	movs	r2, #6
 80003be:	601a      	str	r2, [r3, #0]
			break;
 80003c0:	e01a      	b.n	80003f8 <fsm_red_manual+0x74>
			if (timer1_flag == 1) {
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <fsm_red_manual+0x84>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d113      	bne.n	80003f2 <fsm_red_manual+0x6e>
				toggle_red();
 80003ca:	f000 f9f9 	bl	80007c0 <toggle_red>
				setTimer1(500);
 80003ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d2:	f000 fefb 	bl	80011cc <setTimer1>
			break;
 80003d6:	e00c      	b.n	80003f2 <fsm_red_manual+0x6e>
			if (timer1_flag == 1) {
 80003d8:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <fsm_red_manual+0x84>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d10a      	bne.n	80003f6 <fsm_red_manual+0x72>
				toggle_red();
 80003e0:	f000 f9ee 	bl	80007c0 <toggle_red>
				setTimer1(500);
 80003e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003e8:	f000 fef0 	bl	80011cc <setTimer1>
			break;
 80003ec:	e003      	b.n	80003f6 <fsm_red_manual+0x72>
			break;
 80003ee:	bf00      	nop
 80003f0:	e002      	b.n	80003f8 <fsm_red_manual+0x74>
			break;
 80003f2:	bf00      	nop
 80003f4:	e000      	b.n	80003f8 <fsm_red_manual+0x74>
			break;
 80003f6:	bf00      	nop
	}
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	2000000c 	.word	0x2000000c
 8000400:	08003f70 	.word	0x08003f70
 8000404:	2000014c 	.word	0x2000014c
 8000408:	200000a4 	.word	0x200000a4

0800040c <fsm_amber_manual>:

void fsm_amber_manual() {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	switch(status) {
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <fsm_amber_manual+0x78>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b0a      	cmp	r3, #10
 8000416:	d023      	beq.n	8000460 <fsm_amber_manual+0x54>
 8000418:	2b0a      	cmp	r3, #10
 800041a:	dc2c      	bgt.n	8000476 <fsm_amber_manual+0x6a>
 800041c:	2b08      	cmp	r3, #8
 800041e:	d002      	beq.n	8000426 <fsm_amber_manual+0x1a>
 8000420:	2b09      	cmp	r3, #9
 8000422:	d012      	beq.n	800044a <fsm_amber_manual+0x3e>
				toggle_amber();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000424:	e027      	b.n	8000476 <fsm_amber_manual+0x6a>
			led_config();
 8000426:	f000 f879 	bl	800051c <led_config>
			setTimer1(500);
 800042a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800042e:	f000 fecd 	bl	80011cc <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE3_____#\n\r", 20, 50);
 8000432:	2332      	movs	r3, #50	; 0x32
 8000434:	2214      	movs	r2, #20
 8000436:	4914      	ldr	r1, [pc, #80]	; (8000488 <fsm_amber_manual+0x7c>)
 8000438:	4814      	ldr	r0, [pc, #80]	; (800048c <fsm_amber_manual+0x80>)
 800043a:	f002 ff83 	bl	8003344 <HAL_UART_Transmit>
			disp_t_amber_uart();
 800043e:	f000 ffab 	bl	8001398 <disp_t_amber_uart>
			status = AUTO_AMBER;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <fsm_amber_manual+0x78>)
 8000444:	2209      	movs	r2, #9
 8000446:	601a      	str	r2, [r3, #0]
			break;
 8000448:	e01a      	b.n	8000480 <fsm_amber_manual+0x74>
			if (timer1_flag == 1) {
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <fsm_amber_manual+0x84>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d113      	bne.n	800047a <fsm_amber_manual+0x6e>
				toggle_amber();
 8000452:	f000 f9cf 	bl	80007f4 <toggle_amber>
				setTimer1(500);
 8000456:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800045a:	f000 feb7 	bl	80011cc <setTimer1>
			break;
 800045e:	e00c      	b.n	800047a <fsm_amber_manual+0x6e>
			if (timer1_flag == 1) {
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <fsm_amber_manual+0x84>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d10a      	bne.n	800047e <fsm_amber_manual+0x72>
				toggle_amber();
 8000468:	f000 f9c4 	bl	80007f4 <toggle_amber>
				setTimer1(500);
 800046c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000470:	f000 feac 	bl	80011cc <setTimer1>
			break;
 8000474:	e003      	b.n	800047e <fsm_amber_manual+0x72>
			break;
 8000476:	bf00      	nop
 8000478:	e002      	b.n	8000480 <fsm_amber_manual+0x74>
			break;
 800047a:	bf00      	nop
 800047c:	e000      	b.n	8000480 <fsm_amber_manual+0x74>
			break;
 800047e:	bf00      	nop
	}
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	2000000c 	.word	0x2000000c
 8000488:	08003f84 	.word	0x08003f84
 800048c:	2000014c 	.word	0x2000014c
 8000490:	200000a4 	.word	0x200000a4

08000494 <fsm_green_manual>:

void fsm_green_manual() {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	switch(status) {
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <fsm_green_manual+0x78>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b0d      	cmp	r3, #13
 800049e:	d023      	beq.n	80004e8 <fsm_green_manual+0x54>
 80004a0:	2b0d      	cmp	r3, #13
 80004a2:	dc2c      	bgt.n	80004fe <fsm_green_manual+0x6a>
 80004a4:	2b0b      	cmp	r3, #11
 80004a6:	d002      	beq.n	80004ae <fsm_green_manual+0x1a>
 80004a8:	2b0c      	cmp	r3, #12
 80004aa:	d012      	beq.n	80004d2 <fsm_green_manual+0x3e>
				toggle_green();
				setTimer1(500);
			}
			break;
		default:
			break;
 80004ac:	e027      	b.n	80004fe <fsm_green_manual+0x6a>
			led_config();
 80004ae:	f000 f835 	bl	800051c <led_config>
			setTimer1(500);
 80004b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004b6:	f000 fe89 	bl	80011cc <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE4_____#\n\r", 20, 50);
 80004ba:	2332      	movs	r3, #50	; 0x32
 80004bc:	2214      	movs	r2, #20
 80004be:	4914      	ldr	r1, [pc, #80]	; (8000510 <fsm_green_manual+0x7c>)
 80004c0:	4814      	ldr	r0, [pc, #80]	; (8000514 <fsm_green_manual+0x80>)
 80004c2:	f002 ff3f 	bl	8003344 <HAL_UART_Transmit>
			disp_t_green_uart();
 80004c6:	f000 ff6d 	bl	80013a4 <disp_t_green_uart>
			status = AUTO_GREEN;
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <fsm_green_manual+0x78>)
 80004cc:	220c      	movs	r2, #12
 80004ce:	601a      	str	r2, [r3, #0]
			break;
 80004d0:	e01a      	b.n	8000508 <fsm_green_manual+0x74>
			if (timer1_flag == 1) {
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <fsm_green_manual+0x84>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d113      	bne.n	8000502 <fsm_green_manual+0x6e>
				toggle_green();
 80004da:	f000 f9a5 	bl	8000828 <toggle_green>
				setTimer1(500);
 80004de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e2:	f000 fe73 	bl	80011cc <setTimer1>
			break;
 80004e6:	e00c      	b.n	8000502 <fsm_green_manual+0x6e>
			if (timer1_flag == 1) {
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <fsm_green_manual+0x84>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10a      	bne.n	8000506 <fsm_green_manual+0x72>
				toggle_green();
 80004f0:	f000 f99a 	bl	8000828 <toggle_green>
				setTimer1(500);
 80004f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f8:	f000 fe68 	bl	80011cc <setTimer1>
			break;
 80004fc:	e003      	b.n	8000506 <fsm_green_manual+0x72>
			break;
 80004fe:	bf00      	nop
 8000500:	e002      	b.n	8000508 <fsm_green_manual+0x74>
			break;
 8000502:	bf00      	nop
 8000504:	e000      	b.n	8000508 <fsm_green_manual+0x74>
			break;
 8000506:	bf00      	nop
	}
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000000c 	.word	0x2000000c
 8000510:	08003f98 	.word	0x08003f98
 8000514:	2000014c 	.word	0x2000014c
 8000518:	200000a4 	.word	0x200000a4

0800051c <led_config>:
void on_red_pedestrian();
void on_green_pedestrian();

void set_buzzer();

void led_config() {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	pedestrian_buzzer_config();
 8000520:	f000 f9d8 	bl	80008d4 <pedestrian_buzzer_config>
	pedestrian_led_config();
 8000524:	f000 f856 	bl	80005d4 <pedestrian_led_config>
	switch (status) {
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <led_config+0xb0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b0b      	cmp	r3, #11
 800052e:	d84a      	bhi.n	80005c6 <led_config+0xaa>
 8000530:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <led_config+0x1c>)
 8000532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000536:	bf00      	nop
 8000538:	08000569 	.word	0x08000569
 800053c:	08000577 	.word	0x08000577
 8000540:	08000581 	.word	0x08000581
 8000544:	08000587 	.word	0x08000587
 8000548:	08000591 	.word	0x08000591
 800054c:	08000597 	.word	0x08000597
 8000550:	080005c7 	.word	0x080005c7
 8000554:	080005c7 	.word	0x080005c7
 8000558:	080005a7 	.word	0x080005a7
 800055c:	080005c7 	.word	0x080005c7
 8000560:	080005c7 	.word	0x080005c7
 8000564:	080005b7 	.word	0x080005b7
		case MODE1:
			off_all_leds_road_1();
 8000568:	f000 f89a 	bl	80006a0 <off_all_leds_road_1>
			off_all_leds_road_2();
 800056c:	f000 f8ac 	bl	80006c8 <off_all_leds_road_2>
			off_pedestrian();
 8000570:	f000 f974 	bl	800085c <off_pedestrian>
			break;
 8000574:	e028      	b.n	80005c8 <led_config+0xac>
		case RED_GREEN:
			on_red_road_1();
 8000576:	f000 f8b7 	bl	80006e8 <on_red_road_1>
			on_green_road_2();
 800057a:	f000 f911 	bl	80007a0 <on_green_road_2>
			break;
 800057e:	e023      	b.n	80005c8 <led_config+0xac>
		case RED_AMBER:
			on_amber_road_2();
 8000580:	f000 f8ea 	bl	8000758 <on_amber_road_2>
			break;
 8000584:	e020      	b.n	80005c8 <led_config+0xac>
		case GREEN_RED:
			on_green_road_1();
 8000586:	f000 f8f7 	bl	8000778 <on_green_road_1>
			on_red_road_2();
 800058a:	f000 f8c1 	bl	8000710 <on_red_road_2>
			break;
 800058e:	e01b      	b.n	80005c8 <led_config+0xac>
		case AMBER_RED:
			on_amber_road_1();
 8000590:	f000 f8ce 	bl	8000730 <on_amber_road_1>
			break;
 8000594:	e018      	b.n	80005c8 <led_config+0xac>
		case MODE2:
			on_red_road_1();
 8000596:	f000 f8a7 	bl	80006e8 <on_red_road_1>
			on_red_road_2();
 800059a:	f000 f8b9 	bl	8000710 <on_red_road_2>
			toggle_flag = 0;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <led_config+0xb4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
			break;
 80005a4:	e010      	b.n	80005c8 <led_config+0xac>
		case MODE3:
			on_amber_road_1();
 80005a6:	f000 f8c3 	bl	8000730 <on_amber_road_1>
			on_amber_road_2();
 80005aa:	f000 f8d5 	bl	8000758 <on_amber_road_2>
			toggle_flag = 0;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <led_config+0xb4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
			break;
 80005b4:	e008      	b.n	80005c8 <led_config+0xac>
		case MODE4:
			on_green_road_1();
 80005b6:	f000 f8df 	bl	8000778 <on_green_road_1>
			on_green_road_2();
 80005ba:	f000 f8f1 	bl	80007a0 <on_green_road_2>
			toggle_flag = 0;
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <led_config+0xb4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
			break;
 80005c4:	e000      	b.n	80005c8 <led_config+0xac>
		default:
			break;
 80005c6:	bf00      	nop
	}
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000000c 	.word	0x2000000c
 80005d0:	20000068 	.word	0x20000068

080005d4 <pedestrian_led_config>:
void pedestrian_led_config(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	switch (status) {
 80005d8:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <pedestrian_led_config+0xc4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b0b      	cmp	r3, #11
 80005de:	d858      	bhi.n	8000692 <pedestrian_led_config+0xbe>
 80005e0:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <pedestrian_led_config+0x14>)
 80005e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e6:	bf00      	nop
 80005e8:	08000619 	.word	0x08000619
 80005ec:	0800061f 	.word	0x0800061f
 80005f0:	08000633 	.word	0x08000633
 80005f4:	08000647 	.word	0x08000647
 80005f8:	0800065b 	.word	0x0800065b
 80005fc:	0800066f 	.word	0x0800066f
 8000600:	08000693 	.word	0x08000693
 8000604:	08000693 	.word	0x08000693
 8000608:	0800067b 	.word	0x0800067b
 800060c:	08000693 	.word	0x08000693
 8000610:	08000693 	.word	0x08000693
 8000614:	08000687 	.word	0x08000687
			case MODE1:
				off_pedestrian();
 8000618:	f000 f920 	bl	800085c <off_pedestrian>
				break;
 800061c:	e03a      	b.n	8000694 <pedestrian_led_config+0xc0>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <pedestrian_led_config+0xc8>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d102      	bne.n	800062c <pedestrian_led_config+0x58>
					on_green_pedestrian();
 8000626:	f000 f941 	bl	80008ac <on_green_pedestrian>
					break;
 800062a:	e033      	b.n	8000694 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 800062c:	f000 f916 	bl	800085c <off_pedestrian>
				break;
 8000630:	e030      	b.n	8000694 <pedestrian_led_config+0xc0>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <pedestrian_led_config+0xc8>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <pedestrian_led_config+0x6c>
					on_green_pedestrian();
 800063a:	f000 f937 	bl	80008ac <on_green_pedestrian>
					break;
 800063e:	e029      	b.n	8000694 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000640:	f000 f90c 	bl	800085c <off_pedestrian>
				break;
 8000644:	e026      	b.n	8000694 <pedestrian_led_config+0xc0>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <pedestrian_led_config+0xc8>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d102      	bne.n	8000654 <pedestrian_led_config+0x80>
					on_red_pedestrian();
 800064e:	f000 f919 	bl	8000884 <on_red_pedestrian>
					break;
 8000652:	e01f      	b.n	8000694 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000654:	f000 f902 	bl	800085c <off_pedestrian>
				break;
 8000658:	e01c      	b.n	8000694 <pedestrian_led_config+0xc0>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <pedestrian_led_config+0xc8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d102      	bne.n	8000668 <pedestrian_led_config+0x94>
					on_red_pedestrian();
 8000662:	f000 f90f 	bl	8000884 <on_red_pedestrian>
					break;
 8000666:	e015      	b.n	8000694 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000668:	f000 f8f8 	bl	800085c <off_pedestrian>
				break;
 800066c:	e012      	b.n	8000694 <pedestrian_led_config+0xc0>
			case MODE2:
				curr_ped_status=PED_OFF;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <pedestrian_led_config+0xc8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 8000674:	f000 f8f2 	bl	800085c <off_pedestrian>
				break;
 8000678:	e00c      	b.n	8000694 <pedestrian_led_config+0xc0>
			case MODE3:
				curr_ped_status=PED_OFF;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <pedestrian_led_config+0xc8>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 8000680:	f000 f8ec 	bl	800085c <off_pedestrian>
				break;
 8000684:	e006      	b.n	8000694 <pedestrian_led_config+0xc0>
			case MODE4:
				curr_ped_status=PED_OFF;
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <pedestrian_led_config+0xc8>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 800068c:	f000 f8e6 	bl	800085c <off_pedestrian>
				break;
 8000690:	e000      	b.n	8000694 <pedestrian_led_config+0xc0>
			default:
				break;
 8000692:	bf00      	nop
		}
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000000c 	.word	0x2000000c
 800069c:	20000010 	.word	0x20000010

080006a0 <off_all_leds_road_1>:
void off_all_leds_road_1() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <off_all_leds_road_1+0x20>)
 80006ac:	f001 fa6d 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2108      	movs	r1, #8
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <off_all_leds_road_1+0x24>)
 80006b6:	f001 fa68 	bl	8001b8a <HAL_GPIO_WritePin>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40010c00 	.word	0x40010c00

080006c8 <off_all_leds_road_2>:

void off_all_leds_road_2() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2120      	movs	r1, #32
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <off_all_leds_road_2+0x1c>)
 80006d2:	f001 fa5a 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2110      	movs	r1, #16
 80006da:	4802      	ldr	r0, [pc, #8]	; (80006e4 <off_all_leds_road_2+0x1c>)
 80006dc:	f001 fa55 	bl	8001b8a <HAL_GPIO_WritePin>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40010c00 	.word	0x40010c00

080006e8 <on_red_road_1>:

void on_red_road_1() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <on_red_road_1+0x20>)
 80006f4:	f001 fa49 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2108      	movs	r1, #8
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <on_red_road_1+0x24>)
 80006fe:	f001 fa44 	bl	8001b8a <HAL_GPIO_WritePin>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40010800 	.word	0x40010800
 800070c:	40010c00 	.word	0x40010c00

08000710 <on_red_road_2>:

void on_red_road_2() {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	2120      	movs	r1, #32
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <on_red_road_2+0x1c>)
 800071a:	f001 fa36 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2110      	movs	r1, #16
 8000722:	4802      	ldr	r0, [pc, #8]	; (800072c <on_red_road_2+0x1c>)
 8000724:	f001 fa31 	bl	8001b8a <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40010c00 	.word	0x40010c00

08000730 <on_amber_road_1>:

void on_amber_road_1() {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <on_amber_road_1+0x20>)
 800073c:	f001 fa25 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	2108      	movs	r1, #8
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <on_amber_road_1+0x24>)
 8000746:	f001 fa20 	bl	8001b8a <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40010800 	.word	0x40010800
 8000754:	40010c00 	.word	0x40010c00

08000758 <on_amber_road_2>:

void on_amber_road_2() {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <on_amber_road_2+0x1c>)
 8000762:	f001 fa12 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	2110      	movs	r1, #16
 800076a:	4802      	ldr	r0, [pc, #8]	; (8000774 <on_amber_road_2+0x1c>)
 800076c:	f001 fa0d 	bl	8001b8a <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40010c00 	.word	0x40010c00

08000778 <on_green_road_1>:

void on_green_road_1() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <on_green_road_1+0x20>)
 8000784:	f001 fa01 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 8000788:	2201      	movs	r2, #1
 800078a:	2108      	movs	r1, #8
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <on_green_road_1+0x24>)
 800078e:	f001 f9fc 	bl	8001b8a <HAL_GPIO_WritePin>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40010800 	.word	0x40010800
 800079c:	40010c00 	.word	0x40010c00

080007a0 <on_green_road_2>:

void on_green_road_2() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <on_green_road_2+0x1c>)
 80007aa:	f001 f9ee 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2110      	movs	r1, #16
 80007b2:	4802      	ldr	r0, [pc, #8]	; (80007bc <on_green_road_2+0x1c>)
 80007b4:	f001 f9e9 	bl	8001b8a <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <toggle_red>:


void toggle_red() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <toggle_red+0x30>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d107      	bne.n	80007dc <toggle_red+0x1c>
		on_red_road_1();
 80007cc:	f7ff ff8c 	bl	80006e8 <on_red_road_1>
		on_red_road_2();
 80007d0:	f7ff ff9e 	bl	8000710 <on_red_road_2>
		toggle_flag = 1;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <toggle_red+0x30>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 80007da:	e006      	b.n	80007ea <toggle_red+0x2a>
		off_all_leds_road_1();
 80007dc:	f7ff ff60 	bl	80006a0 <off_all_leds_road_1>
		off_all_leds_road_2();
 80007e0:	f7ff ff72 	bl	80006c8 <off_all_leds_road_2>
		toggle_flag = 0;
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <toggle_red+0x30>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000068 	.word	0x20000068

080007f4 <toggle_amber>:

void toggle_amber() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <toggle_amber+0x30>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d107      	bne.n	8000810 <toggle_amber+0x1c>
		on_amber_road_1();
 8000800:	f7ff ff96 	bl	8000730 <on_amber_road_1>
		on_amber_road_2();
 8000804:	f7ff ffa8 	bl	8000758 <on_amber_road_2>
		toggle_flag = 1;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <toggle_amber+0x30>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 800080e:	e006      	b.n	800081e <toggle_amber+0x2a>
		off_all_leds_road_1();
 8000810:	f7ff ff46 	bl	80006a0 <off_all_leds_road_1>
		off_all_leds_road_2();
 8000814:	f7ff ff58 	bl	80006c8 <off_all_leds_road_2>
		toggle_flag = 0;
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <toggle_amber+0x30>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000068 	.word	0x20000068

08000828 <toggle_green>:

void toggle_green() {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <toggle_green+0x30>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d107      	bne.n	8000844 <toggle_green+0x1c>
		on_green_road_1();
 8000834:	f7ff ffa0 	bl	8000778 <on_green_road_1>
		on_green_road_2();
 8000838:	f7ff ffb2 	bl	80007a0 <on_green_road_2>
		toggle_flag = 1;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <toggle_green+0x30>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000842:	e006      	b.n	8000852 <toggle_green+0x2a>
		off_all_leds_road_1();
 8000844:	f7ff ff2c 	bl	80006a0 <off_all_leds_road_1>
		off_all_leds_road_2();
 8000848:	f7ff ff3e 	bl	80006c8 <off_all_leds_road_2>
		toggle_flag = 0;
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <toggle_green+0x30>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000068 	.word	0x20000068

0800085c <off_pedestrian>:

void off_pedestrian(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <off_pedestrian+0x20>)
 8000868:	f001 f98f 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <off_pedestrian+0x24>)
 8000874:	f001 f989 	bl	8001b8a <HAL_GPIO_WritePin>
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40010c00 	.word	0x40010c00
 8000880:	40010800 	.word	0x40010800

08000884 <on_red_pedestrian>:
void on_red_pedestrian(){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 1);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <on_red_pedestrian+0x20>)
 8000890:	f001 f97b 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <on_red_pedestrian+0x24>)
 800089c:	f001 f975 	bl	8001b8a <HAL_GPIO_WritePin>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010c00 	.word	0x40010c00
 80008a8:	40010800 	.word	0x40010800

080008ac <on_green_pedestrian>:
void on_green_pedestrian(){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <on_green_pedestrian+0x20>)
 80008b8:	f001 f967 	bl	8001b8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 1);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <on_green_pedestrian+0x24>)
 80008c4:	f001 f961 	bl	8001b8a <HAL_GPIO_WritePin>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40010c00 	.word	0x40010c00
 80008d0:	40010800 	.word	0x40010800

080008d4 <pedestrian_buzzer_config>:

void pedestrian_buzzer_config(){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	switch (status) {
 80008d8:	4b34      	ldr	r3, [pc, #208]	; (80009ac <pedestrian_buzzer_config+0xd8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b0b      	cmp	r3, #11
 80008de:	d862      	bhi.n	80009a6 <pedestrian_buzzer_config+0xd2>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <pedestrian_buzzer_config+0x14>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	08000919 	.word	0x08000919
 80008ec:	08000921 	.word	0x08000921
 80008f0:	08000937 	.word	0x08000937
 80008f4:	0800094d 	.word	0x0800094d
 80008f8:	08000965 	.word	0x08000965
 80008fc:	0800097d 	.word	0x0800097d
 8000900:	080009a7 	.word	0x080009a7
 8000904:	080009a7 	.word	0x080009a7
 8000908:	0800098b 	.word	0x0800098b
 800090c:	080009a7 	.word	0x080009a7
 8000910:	080009a7 	.word	0x080009a7
 8000914:	08000999 	.word	0x08000999
			case MODE1:
				buzzer(0);
 8000918:	2000      	movs	r0, #0
 800091a:	f000 f8ef 	bl	8000afc <buzzer>
				break;
 800091e:	e043      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <pedestrian_buzzer_config+0x5a>
					set_buzzer();
 8000928:	f000 f844 	bl	80009b4 <set_buzzer>
					break;
 800092c:	e03c      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 f8e4 	bl	8000afc <buzzer>
				break;
 8000934:	e038      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <pedestrian_buzzer_config+0x70>
					set_buzzer();
 800093e:	f000 f839 	bl	80009b4 <set_buzzer>
					break;
 8000942:	e031      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000944:	2000      	movs	r0, #0
 8000946:	f000 f8d9 	bl	8000afc <buzzer>
				break;
 800094a:	e02d      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d103      	bne.n	800095c <pedestrian_buzzer_config+0x88>
					buzzer(0);
 8000954:	2000      	movs	r0, #0
 8000956:	f000 f8d1 	bl	8000afc <buzzer>
					break;
 800095a:	e025      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 f8cd 	bl	8000afc <buzzer>
				break;
 8000962:	e021      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d103      	bne.n	8000974 <pedestrian_buzzer_config+0xa0>
					buzzer(0);
 800096c:	2000      	movs	r0, #0
 800096e:	f000 f8c5 	bl	8000afc <buzzer>
					break;
 8000972:	e019      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000974:	2000      	movs	r0, #0
 8000976:	f000 f8c1 	bl	8000afc <buzzer>
				break;
 800097a:	e015      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case MODE2:
				curr_ped_status=PED_OFF;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 8000982:	2000      	movs	r0, #0
 8000984:	f000 f8ba 	bl	8000afc <buzzer>
				break;
 8000988:	e00e      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case MODE3:
				curr_ped_status=PED_OFF;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 f8b3 	bl	8000afc <buzzer>
				break;
 8000996:	e007      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case MODE4:
				curr_ped_status=PED_OFF;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f8ac 	bl	8000afc <buzzer>
				break;
 80009a4:	e000      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			default:
				break;
 80009a6:	bf00      	nop
		}
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000000c 	.word	0x2000000c
 80009b0:	20000010 	.word	0x20000010

080009b4 <set_buzzer>:


void set_buzzer(){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
//	setTimer6(500);
	if (timer6_flag == 1){
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <set_buzzer+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d117      	bne.n	80009f0 <set_buzzer+0x3c>
		setTimer6(buzzer_period);
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <set_buzzer+0x44>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fc35 	bl	8001234 <setTimer6>
		if (buzzer_flag == 0){
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <set_buzzer+0x48>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d108      	bne.n	80009e4 <set_buzzer+0x30>
			buzzer(volume);
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <set_buzzer+0x4c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f890 	bl	8000afc <buzzer>
			buzzer_flag = 1;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <set_buzzer+0x48>)
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
		}else {
			buzzer(0);
			buzzer_flag = 0;
		}
	}
}
 80009e2:	e005      	b.n	80009f0 <set_buzzer+0x3c>
			buzzer(0);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 f889 	bl	8000afc <buzzer>
			buzzer_flag = 0;
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <set_buzzer+0x48>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200000b8 	.word	0x200000b8
 80009f8:	20000014 	.word	0x20000014
 80009fc:	2000006c 	.word	0x2000006c
 8000a00:	20000018 	.word	0x20000018

08000a04 <fsm_button_processing>:
enum ButtonState button_0_state = BUTTON_PRESSED;
enum ButtonState button_1_state = BUTTON_PRESSED;
enum ButtonState button_2_state = BUTTON_PRESSED;
enum ButtonState button_3_state = BUTTON_PRESSED;

void fsm_button_processing() {
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <button_reading>:
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static GPIO_TypeDef* button_ports[N0_OF_BUTTONS] = {A0_PedButton_GPIO_Port, A1_Button1_GPIO_Port, A2_Button2_GPIO_Port, A3_Button3_GPIO_Port};
static uint16_t button_pins[N0_OF_BUTTONS] = {A0_PedButton_Pin, A1_Button1_Pin, A2_Button2_Pin, A3_Button3_Pin};

void button_reading(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	e058      	b.n	8000ace <button_reading+0xbe>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000a1c:	4a30      	ldr	r2, [pc, #192]	; (8000ae0 <button_reading+0xd0>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	7819      	ldrb	r1, [r3, #0]
 8000a24:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <button_reading+0xd4>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	460a      	mov	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000a2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ae8 <button_reading+0xd8>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a36:	492d      	ldr	r1, [pc, #180]	; (8000aec <button_reading+0xdc>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4610      	mov	r0, r2
 8000a42:	f001 f88b 	bl	8001b5c <HAL_GPIO_ReadPin>
 8000a46:	4603      	mov	r3, r0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4a25      	ldr	r2, [pc, #148]	; (8000ae0 <button_reading+0xd0>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	460a      	mov	r2, r1
 8000a52:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000a54:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <button_reading+0xd0>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	4921      	ldr	r1, [pc, #132]	; (8000ae4 <button_reading+0xd4>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	440b      	add	r3, r1
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d108      	bne.n	8000a7a <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000a68:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <button_reading+0xd0>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	7819      	ldrb	r1, [r3, #0]
 8000a70:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <button_reading+0xe0>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	460a      	mov	r2, r1
 8000a78:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <button_reading+0xe0>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d116      	bne.n	8000ab4 <button_reading+0xa4>
			//if a button is pressed, we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000a86:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <button_reading+0xe4>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a8e:	2b63      	cmp	r3, #99	; 0x63
 8000a90:	d80a      	bhi.n	8000aa8 <button_reading+0x98>
				counterForButtonPress1s[i]++;
 8000a92:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <button_reading+0xe4>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <button_reading+0xe4>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000aa6:	e00f      	b.n	8000ac8 <button_reading+0xb8>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000aa8:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <button_reading+0xe8>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e009      	b.n	8000ac8 <button_reading+0xb8>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <button_reading+0xe4>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <button_reading+0xe8>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	dda3      	ble.n	8000a1c <button_reading+0xc>
		}
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000074 	.word	0x20000074
 8000ae4:	20000078 	.word	0x20000078
 8000ae8:	2000001c 	.word	0x2000001c
 8000aec:	2000002c 	.word	0x2000002c
 8000af0:	20000070 	.word	0x20000070
 8000af4:	20000080 	.word	0x20000080
 8000af8:	2000007c 	.word	0x2000007c

08000afc <buzzer>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void buzzer(int vol){
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, vol);
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <buzzer+0x1c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200000bc 	.word	0x200000bc

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fc76 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f84e 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f000 f978 	bl	8000e1c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b2c:	f000 f88a 	bl	8000c44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b30:	f000 f8d4 	bl	8000cdc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000b34:	f000 f948 	bl	8000dc8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b38:	4819      	ldr	r0, [pc, #100]	; (8000ba0 <main+0x84>)
 8000b3a:	f001 fc9d 	bl	8002478 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000b3e:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <main+0x88>)
 8000b40:	f001 fc9a 	bl	8002478 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b44:	2100      	movs	r1, #0
 8000b46:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <main+0x88>)
 8000b48:	f001 fd40 	bl	80025cc <HAL_TIM_PWM_Start>

  setTimer6(500);
 8000b4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b50:	f000 fb70 	bl	8001234 <setTimer6>
  SCH_Add_Task(timer_run, 0, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2100      	movs	r1, #0
 8000b58:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <main+0x8c>)
 8000b5a:	f000 f9e2 	bl	8000f22 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2100      	movs	r1, #0
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <main+0x90>)
 8000b64:	f000 f9dd 	bl	8000f22 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 0, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <main+0x94>)
 8000b6e:	f000 f9d8 	bl	8000f22 <SCH_Add_Task>
  SCH_Add_Task(fsm_red_manual, 0, 1);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2100      	movs	r1, #0
 8000b76:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <main+0x98>)
 8000b78:	f000 f9d3 	bl	8000f22 <SCH_Add_Task>
  SCH_Add_Task(fsm_amber_manual, 0, 1);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2100      	movs	r1, #0
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <main+0x9c>)
 8000b82:	f000 f9ce 	bl	8000f22 <SCH_Add_Task>
  SCH_Add_Task(fsm_green_manual, 0, 1);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2100      	movs	r1, #0
 8000b8a:	480c      	ldr	r0, [pc, #48]	; (8000bbc <main+0xa0>)
 8000b8c:	f000 f9c9 	bl	8000f22 <SCH_Add_Task>
  SCH_Add_Task(fsm_button_processing, 0, 1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2100      	movs	r1, #0
 8000b94:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <main+0xa4>)
 8000b96:	f000 f9c4 	bl	8000f22 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000b9a:	f000 f9ce 	bl	8000f3a <SCH_Dispatch_Tasks>
 8000b9e:	e7fc      	b.n	8000b9a <main+0x7e>
 8000ba0:	20000104 	.word	0x20000104
 8000ba4:	200000bc 	.word	0x200000bc
 8000ba8:	08001269 	.word	0x08001269
 8000bac:	08000a11 	.word	0x08000a11
 8000bb0:	0800014d 	.word	0x0800014d
 8000bb4:	08000385 	.word	0x08000385
 8000bb8:	0800040d 	.word	0x0800040d
 8000bbc:	08000495 	.word	0x08000495
 8000bc0:	08000a05 	.word	0x08000a05

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b090      	sub	sp, #64	; 0x40
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	2228      	movs	r2, #40	; 0x28
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 f9ae 	bl	8003f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bee:	2310      	movs	r3, #16
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 ffda 	bl	8001bbc <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000c0e:	f000 f97d 	bl	8000f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c16:	2302      	movs	r3, #2
 8000c18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fa45 	bl	80020bc <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c38:	f000 f968 	bl	8000f0c <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3740      	adds	r7, #64	; 0x40
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c6a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c78:	2209      	movs	r2, #9
 8000c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c8a:	f001 fba5 	bl	80023d8 <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c94:	f000 f93a 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000ca6:	f001 fefd 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cb0:	f000 f92c 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000cc2:	f002 fa7f 	bl	80031c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 f91e 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000104 	.word	0x20000104

08000cdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	615a      	str	r2, [r3, #20]
 8000d0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000d0e:	4a2d      	ldr	r2, [pc, #180]	; (8000dc4 <MX_TIM3_Init+0xe8>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000d14:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000d22:	2209      	movs	r2, #9
 8000d24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d32:	4823      	ldr	r0, [pc, #140]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000d34:	f001 fb50 	bl	80023d8 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d3e:	f000 f8e5 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481c      	ldr	r0, [pc, #112]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000d50:	f001 fea8 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d5a:	f000 f8d7 	bl	8000f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d5e:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000d60:	f001 fbdc 	bl	800251c <HAL_TIM_PWM_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d6a:	f000 f8cf 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000d7e:	f002 fa21 	bl	80031c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d88:	f000 f8c0 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d8c:	2360      	movs	r3, #96	; 0x60
 8000d8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4619      	mov	r1, r3
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000da4:	f001 fdbc 	bl	8002920 <HAL_TIM_PWM_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000dae:	f000 f8ad 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM3_Init+0xe4>)
 8000db4:	f000 f93a 	bl	800102c <HAL_TIM_MspPostInit>

}
 8000db8:	bf00      	nop
 8000dba:	3738      	adds	r7, #56	; 0x38
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200000bc 	.word	0x200000bc
 8000dc4:	40000400 	.word	0x40000400

08000dc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <MX_USART2_UART_Init+0x50>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000e00:	f002 fa50 	bl	80032a4 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e0a:	f000 f87f 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000014c 	.word	0x2000014c
 8000e18:	40004400 	.word	0x40004400

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b28      	ldr	r3, [pc, #160]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a27      	ldr	r2, [pc, #156]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b25      	ldr	r3, [pc, #148]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000e66:	4822      	ldr	r0, [pc, #136]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e68:	f000 fe8f 	bl	8001b8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PedLED_Pin|D2_LED1_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000e72:	4820      	ldr	r0, [pc, #128]	; (8000ef4 <MX_GPIO_Init+0xd8>)
 8000e74:	f000 fe89 	bl	8001b8a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_PedButton_Pin A1_Button1_Pin A2_Button2_Pin */
  GPIO_InitStruct.Pin = A0_PedButton_Pin|A1_Button1_Pin|A2_Button2_Pin;
 8000e78:	2313      	movs	r3, #19
 8000e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481a      	ldr	r0, [pc, #104]	; (8000ef4 <MX_GPIO_Init+0xd8>)
 8000e8c:	f000 fce2 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Button3_Pin */
  GPIO_InitStruct.Pin = A3_Button3_Pin;
 8000e90:	2301      	movs	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_Button3_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000ea4:	f000 fcd6 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PedLED_Pin D3_LED1_Pin D5_LED2_Pin D4_LED2_Pin */
  GPIO_InitStruct.Pin = D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin;
 8000ea8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000eac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000ec2:	f000 fcc7 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PedLED_Pin D2_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PedLED_Pin|D2_LED1_Pin;
 8000ec6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000eca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_GPIO_Init+0xd8>)
 8000ee0:	f000 fcb8 	bl	8001854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010c00 	.word	0x40010c00
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000f00:	f000 f809 	bl	8000f16 <SCH_Update>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>

08000f16 <SCH_Update>:

void SCH_Init(void){

}

void SCH_Update(void) {
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]

}
 8000f2e:	bf00      	nop
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <SCH_Dispatch_Tasks>:

uint8_t SCH_Delete_Task(uint32_t taskID){

}

void SCH_Dispatch_Tasks(void){
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_MspInit+0x60>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_MspInit+0x60>)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fbc:	d114      	bne.n	8000fe8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_TIM_Base_MspInit+0x78>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a18      	ldr	r2, [pc, #96]	; (8001024 <HAL_TIM_Base_MspInit+0x78>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_TIM_Base_MspInit+0x78>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	201c      	movs	r0, #28
 8000fdc:	f000 fb51 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fe0:	201c      	movs	r0, #28
 8000fe2:	f000 fb6a 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fe6:	e018      	b.n	800101a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_TIM_Base_MspInit+0x7c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d113      	bne.n	800101a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_TIM_Base_MspInit+0x78>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_TIM_Base_MspInit+0x78>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_TIM_Base_MspInit+0x78>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	201d      	movs	r0, #29
 8001010:	f000 fb37 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001014:	201d      	movs	r0, #29
 8001016:	f000 fb50 	bl	80016ba <HAL_NVIC_EnableIRQ>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	40000400 	.word	0x40000400

0800102c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <HAL_TIM_MspPostInit+0x58>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d117      	bne.n	800107c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_TIM_MspPostInit+0x5c>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_TIM_MspPostInit+0x5c>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_TIM_MspPostInit+0x5c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001064:	2340      	movs	r3, #64	; 0x40
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_TIM_MspPostInit+0x60>)
 8001078:	f000 fbec 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40000400 	.word	0x40000400
 8001088:	40021000 	.word	0x40021000
 800108c:	40010800 	.word	0x40010800

08001090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <HAL_UART_MspInit+0x98>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d137      	bne.n	8001120 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <HAL_UART_MspInit+0x9c>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_UART_MspInit+0x9c>)
 80010b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ba:	61d3      	str	r3, [r2, #28]
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_UART_MspInit+0x9c>)
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_UART_MspInit+0x9c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_UART_MspInit+0x9c>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_UART_MspInit+0x9c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010e0:	2304      	movs	r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <HAL_UART_MspInit+0xa0>)
 80010f4:	f000 fbae 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010f8:	2308      	movs	r3, #8
 80010fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <HAL_UART_MspInit+0xa0>)
 800110c:	f000 fba2 	bl	8001854 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	2026      	movs	r0, #38	; 0x26
 8001116:	f000 fab4 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800111a:	2026      	movs	r0, #38	; 0x26
 800111c:	f000 facd 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40004400 	.word	0x40004400
 800112c:	40021000 	.word	0x40021000
 8001130:	40010800 	.word	0x40010800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117a:	f000 f98f 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM2_IRQHandler+0x10>)
 800118a:	f001 fac1 	bl	8002710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000104 	.word	0x20000104

08001198 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <TIM3_IRQHandler+0x10>)
 800119e:	f001 fab7 	bl	8002710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000bc 	.word	0x200000bc

080011ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <USART2_IRQHandler+0x10>)
 80011b2:	f002 f94b 	bl	800344c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000014c 	.word	0x2000014c

080011c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <setTimer1>:
void setTimer0(int duration) {
	timer0_counter = duration/TIMER_CYCLE;
	timer0_flag = 0;
}

void setTimer1(int duration) {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <setTimer1+0x28>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	fb92 f3f3 	sdiv	r3, r2, r3
 80011de:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <setTimer1+0x2c>)
 80011e0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <setTimer1+0x30>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000038 	.word	0x20000038
 80011f8:	2000008c 	.word	0x2000008c
 80011fc:	200000a4 	.word	0x200000a4

08001200 <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <setTimer4+0x28>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <setTimer4+0x2c>)
 8001214:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <setTimer4+0x30>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000038 	.word	0x20000038
 800122c:	20000194 	.word	0x20000194
 8001230:	200000b0 	.word	0x200000b0

08001234 <setTimer6>:
void setTimer5(int duration) {
	timer5_counter = duration/TIMER_CYCLE;
	timer5_flag = 0;
}

void setTimer6(int duration) {
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TIMER_CYCLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <setTimer6+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	fb92 f3f3 	sdiv	r3, r2, r3
 8001246:	4a06      	ldr	r2, [pc, #24]	; (8001260 <setTimer6+0x2c>)
 8001248:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <setTimer6+0x30>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000038 	.word	0x20000038
 8001260:	2000009c 	.word	0x2000009c
 8001264:	200000b8 	.word	0x200000b8

08001268 <timer_run>:

void timer_run() {
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 800126c:	4b39      	ldr	r3, [pc, #228]	; (8001354 <timer_run+0xec>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	dd0b      	ble.n	800128c <timer_run+0x24>
		timer0_counter--;
 8001274:	4b37      	ldr	r3, [pc, #220]	; (8001354 <timer_run+0xec>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	4a36      	ldr	r2, [pc, #216]	; (8001354 <timer_run+0xec>)
 800127c:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <timer_run+0xec>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <timer_run+0x24>
 8001286:	4b34      	ldr	r3, [pc, #208]	; (8001358 <timer_run+0xf0>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 800128c:	4b33      	ldr	r3, [pc, #204]	; (800135c <timer_run+0xf4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	dd0b      	ble.n	80012ac <timer_run+0x44>
		timer1_counter--;
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <timer_run+0xf4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3b01      	subs	r3, #1
 800129a:	4a30      	ldr	r2, [pc, #192]	; (800135c <timer_run+0xf4>)
 800129c:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <timer_run+0xf4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <timer_run+0x44>
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <timer_run+0xf8>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <timer_run+0xfc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	dd0b      	ble.n	80012cc <timer_run+0x64>
		timer2_counter--;
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <timer_run+0xfc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	4a2a      	ldr	r2, [pc, #168]	; (8001364 <timer_run+0xfc>)
 80012bc:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 80012be:	4b29      	ldr	r3, [pc, #164]	; (8001364 <timer_run+0xfc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <timer_run+0x64>
 80012c6:	4b28      	ldr	r3, [pc, #160]	; (8001368 <timer_run+0x100>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <timer_run+0x104>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dd0b      	ble.n	80012ec <timer_run+0x84>
		timer3_counter--;
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <timer_run+0x104>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	4a24      	ldr	r2, [pc, #144]	; (800136c <timer_run+0x104>)
 80012dc:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <timer_run+0x104>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <timer_run+0x84>
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <timer_run+0x108>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <timer_run+0x10c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	dd0b      	ble.n	800130c <timer_run+0xa4>
		timer4_counter--;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <timer_run+0x10c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <timer_run+0x10c>)
 80012fc:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <timer_run+0x10c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <timer_run+0xa4>
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <timer_run+0x110>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
	}
	if (timer5_counter > 0) {
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <timer_run+0x114>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd0b      	ble.n	800132c <timer_run+0xc4>
		timer5_counter--;
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <timer_run+0x114>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3b01      	subs	r3, #1
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <timer_run+0x114>)
 800131c:	6013      	str	r3, [r2, #0]
		if (timer5_counter == 0) timer5_flag = 1;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <timer_run+0x114>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <timer_run+0xc4>
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <timer_run+0x118>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
	}
	if (timer6_counter > 0) {
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <timer_run+0x11c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	dd0b      	ble.n	800134c <timer_run+0xe4>
		timer6_counter--;
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <timer_run+0x11c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <timer_run+0x11c>)
 800133c:	6013      	str	r3, [r2, #0]
		if (timer6_counter == 0) timer6_flag = 1;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <timer_run+0x11c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <timer_run+0xe4>
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <timer_run+0x120>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
	}
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000088 	.word	0x20000088
 8001358:	200000a0 	.word	0x200000a0
 800135c:	2000008c 	.word	0x2000008c
 8001360:	200000a4 	.word	0x200000a4
 8001364:	20000090 	.word	0x20000090
 8001368:	200000a8 	.word	0x200000a8
 800136c:	20000094 	.word	0x20000094
 8001370:	200000ac 	.word	0x200000ac
 8001374:	20000194 	.word	0x20000194
 8001378:	200000b0 	.word	0x200000b0
 800137c:	20000098 	.word	0x20000098
 8001380:	200000b4 	.word	0x200000b4
 8001384:	2000009c 	.word	0x2000009c
 8001388:	200000b8 	.word	0x200000b8

0800138c <disp_t_red_uart>:
#include "string.h"
#include "stdio.h"
#include "input_reading.h"
#include "input_processing.h"

void disp_t_red_uart() {
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <disp_t_amber_uart>:

void disp_t_amber_uart() {
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <disp_t_green_uart>:

void disp_t_green_uart() {
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <disp_time_uart>:

void disp_time_uart(int t_road_1, int t_road_2) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]

}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c4:	f7ff fefc 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ca:	490c      	ldr	r1, [pc, #48]	; (80013fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013cc:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013e0:	4c09      	ldr	r4, [pc, #36]	; (8001408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f002 fd7d 	bl	8003eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f2:	f7ff fb93 	bl	8000b1c <main>
  bx lr
 80013f6:	4770      	bx	lr
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001400:	08003fe0 	.word	0x08003fe0
  ldr r2, =_sbss
 8001404:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001408:	2000019c 	.word	0x2000019c

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x28>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x28>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f923 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	200f      	movs	r0, #15
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fd8c 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40022000 	.word	0x40022000

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f93b 	bl	80016d6 <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f903 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000034 	.word	0x20000034
 8001494:	20000040 	.word	0x20000040
 8001498:	2000003c 	.word	0x2000003c

0800149c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x1c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_IncTick+0x20>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a03      	ldr	r2, [pc, #12]	; (80014bc <HAL_IncTick+0x20>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000040 	.word	0x20000040
 80014bc:	20000198 	.word	0x20000198

080014c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <HAL_GetTick+0x10>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000198 	.word	0x20000198

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4906      	ldr	r1, [pc, #24]	; (800156c <__NVIC_EnableIRQ+0x34>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f7ff ff90 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff2d 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff42 	bl	800151c <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff90 	bl	80015c4 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5f 	bl	8001570 <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff35 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa2 	bl	8001628 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d008      	beq.n	8001718 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2204      	movs	r2, #4
 800170a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e020      	b.n	800175a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 020e 	bic.w	r2, r2, #14
 8001726:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	2101      	movs	r1, #1
 8001742:	fa01 f202 	lsl.w	r2, r1, r2
 8001746:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d005      	beq.n	8001788 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2204      	movs	r2, #4
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e051      	b.n	800182c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 020e 	bic.w	r2, r2, #14
 8001796:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a22      	ldr	r2, [pc, #136]	; (8001838 <HAL_DMA_Abort_IT+0xd4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d029      	beq.n	8001806 <HAL_DMA_Abort_IT+0xa2>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a21      	ldr	r2, [pc, #132]	; (800183c <HAL_DMA_Abort_IT+0xd8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d022      	beq.n	8001802 <HAL_DMA_Abort_IT+0x9e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_DMA_Abort_IT+0xdc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01a      	beq.n	80017fc <HAL_DMA_Abort_IT+0x98>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <HAL_DMA_Abort_IT+0xe0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d012      	beq.n	80017f6 <HAL_DMA_Abort_IT+0x92>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <HAL_DMA_Abort_IT+0xe4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00a      	beq.n	80017f0 <HAL_DMA_Abort_IT+0x8c>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1b      	ldr	r2, [pc, #108]	; (800184c <HAL_DMA_Abort_IT+0xe8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d102      	bne.n	80017ea <HAL_DMA_Abort_IT+0x86>
 80017e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017e8:	e00e      	b.n	8001808 <HAL_DMA_Abort_IT+0xa4>
 80017ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017ee:	e00b      	b.n	8001808 <HAL_DMA_Abort_IT+0xa4>
 80017f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f4:	e008      	b.n	8001808 <HAL_DMA_Abort_IT+0xa4>
 80017f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fa:	e005      	b.n	8001808 <HAL_DMA_Abort_IT+0xa4>
 80017fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001800:	e002      	b.n	8001808 <HAL_DMA_Abort_IT+0xa4>
 8001802:	2310      	movs	r3, #16
 8001804:	e000      	b.n	8001808 <HAL_DMA_Abort_IT+0xa4>
 8001806:	2301      	movs	r3, #1
 8001808:	4a11      	ldr	r2, [pc, #68]	; (8001850 <HAL_DMA_Abort_IT+0xec>)
 800180a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
    } 
  }
  return status;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40020008 	.word	0x40020008
 800183c:	4002001c 	.word	0x4002001c
 8001840:	40020030 	.word	0x40020030
 8001844:	40020044 	.word	0x40020044
 8001848:	40020058 	.word	0x40020058
 800184c:	4002006c 	.word	0x4002006c
 8001850:	40020000 	.word	0x40020000

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b08b      	sub	sp, #44	; 0x2c
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	e169      	b.n	8001b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001868:	2201      	movs	r2, #1
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8158 	bne.w	8001b36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a9a      	ldr	r2, [pc, #616]	; (8001af4 <HAL_GPIO_Init+0x2a0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d05e      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 8001890:	4a98      	ldr	r2, [pc, #608]	; (8001af4 <HAL_GPIO_Init+0x2a0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d875      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 8001896:	4a98      	ldr	r2, [pc, #608]	; (8001af8 <HAL_GPIO_Init+0x2a4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d058      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 800189c:	4a96      	ldr	r2, [pc, #600]	; (8001af8 <HAL_GPIO_Init+0x2a4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d86f      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018a2:	4a96      	ldr	r2, [pc, #600]	; (8001afc <HAL_GPIO_Init+0x2a8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d052      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018a8:	4a94      	ldr	r2, [pc, #592]	; (8001afc <HAL_GPIO_Init+0x2a8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d869      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ae:	4a94      	ldr	r2, [pc, #592]	; (8001b00 <HAL_GPIO_Init+0x2ac>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d04c      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018b4:	4a92      	ldr	r2, [pc, #584]	; (8001b00 <HAL_GPIO_Init+0x2ac>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d863      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ba:	4a92      	ldr	r2, [pc, #584]	; (8001b04 <HAL_GPIO_Init+0x2b0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d046      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018c0:	4a90      	ldr	r2, [pc, #576]	; (8001b04 <HAL_GPIO_Init+0x2b0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d85d      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018c6:	2b12      	cmp	r3, #18
 80018c8:	d82a      	bhi.n	8001920 <HAL_GPIO_Init+0xcc>
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d859      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <HAL_GPIO_Init+0x80>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	0800194f 	.word	0x0800194f
 80018d8:	08001929 	.word	0x08001929
 80018dc:	0800193b 	.word	0x0800193b
 80018e0:	0800197d 	.word	0x0800197d
 80018e4:	08001983 	.word	0x08001983
 80018e8:	08001983 	.word	0x08001983
 80018ec:	08001983 	.word	0x08001983
 80018f0:	08001983 	.word	0x08001983
 80018f4:	08001983 	.word	0x08001983
 80018f8:	08001983 	.word	0x08001983
 80018fc:	08001983 	.word	0x08001983
 8001900:	08001983 	.word	0x08001983
 8001904:	08001983 	.word	0x08001983
 8001908:	08001983 	.word	0x08001983
 800190c:	08001983 	.word	0x08001983
 8001910:	08001983 	.word	0x08001983
 8001914:	08001983 	.word	0x08001983
 8001918:	08001931 	.word	0x08001931
 800191c:	08001945 	.word	0x08001945
 8001920:	4a79      	ldr	r2, [pc, #484]	; (8001b08 <HAL_GPIO_Init+0x2b4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001926:	e02c      	b.n	8001982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e029      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	3304      	adds	r3, #4
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e024      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	3308      	adds	r3, #8
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e01f      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	330c      	adds	r3, #12
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e01a      	b.n	8001984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001956:	2304      	movs	r3, #4
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e013      	b.n	8001984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001964:	2308      	movs	r3, #8
 8001966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	611a      	str	r2, [r3, #16]
          break;
 800196e:	e009      	b.n	8001984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001970:	2308      	movs	r3, #8
 8001972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	615a      	str	r2, [r3, #20]
          break;
 800197a:	e003      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x130>
          break;
 8001982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2bff      	cmp	r3, #255	; 0xff
 8001988:	d801      	bhi.n	800198e <HAL_GPIO_Init+0x13a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_Init+0x13e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2bff      	cmp	r3, #255	; 0xff
 8001998:	d802      	bhi.n	80019a0 <HAL_GPIO_Init+0x14c>
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x152>
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	3b08      	subs	r3, #8
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	210f      	movs	r1, #15
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	6a39      	ldr	r1, [r7, #32]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80b1 	beq.w	8001b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d4:	4b4d      	ldr	r3, [pc, #308]	; (8001b0c <HAL_GPIO_Init+0x2b8>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a4c      	ldr	r2, [pc, #304]	; (8001b0c <HAL_GPIO_Init+0x2b8>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <HAL_GPIO_Init+0x2b8>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ec:	4a48      	ldr	r2, [pc, #288]	; (8001b10 <HAL_GPIO_Init+0x2bc>)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a40      	ldr	r2, [pc, #256]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d013      	beq.n	8001a40 <HAL_GPIO_Init+0x1ec>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3f      	ldr	r2, [pc, #252]	; (8001b18 <HAL_GPIO_Init+0x2c4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00d      	beq.n	8001a3c <HAL_GPIO_Init+0x1e8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a3e      	ldr	r2, [pc, #248]	; (8001b1c <HAL_GPIO_Init+0x2c8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_Init+0x1e4>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a3d      	ldr	r2, [pc, #244]	; (8001b20 <HAL_GPIO_Init+0x2cc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_Init+0x1e0>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e006      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a34:	2304      	movs	r3, #4
 8001a36:	e004      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a40:	2300      	movs	r3, #0
 8001a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a44:	f002 0203 	and.w	r2, r2, #3
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a52:	492f      	ldr	r1, [pc, #188]	; (8001b10 <HAL_GPIO_Init+0x2bc>)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	492c      	ldr	r1, [pc, #176]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4928      	ldr	r1, [pc, #160]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	4922      	ldr	r1, [pc, #136]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	491e      	ldr	r1, [pc, #120]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4918      	ldr	r1, [pc, #96]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4914      	ldr	r1, [pc, #80]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d021      	beq.n	8001b28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	490e      	ldr	r1, [pc, #56]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
 8001af0:	e021      	b.n	8001b36 <HAL_GPIO_Init+0x2e2>
 8001af2:	bf00      	nop
 8001af4:	10320000 	.word	0x10320000
 8001af8:	10310000 	.word	0x10310000
 8001afc:	10220000 	.word	0x10220000
 8001b00:	10210000 	.word	0x10210000
 8001b04:	10120000 	.word	0x10120000
 8001b08:	10110000 	.word	0x10110000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40010800 	.word	0x40010800
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40011400 	.word	0x40011400
 8001b24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_GPIO_Init+0x304>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	4909      	ldr	r1, [pc, #36]	; (8001b58 <HAL_GPIO_Init+0x304>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	3301      	adds	r3, #1
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f47f ae8e 	bne.w	8001868 <HAL_GPIO_Init+0x14>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	372c      	adds	r7, #44	; 0x2c
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	807b      	strh	r3, [r7, #2]
 8001b96:	4613      	mov	r3, r2
 8001b98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9a:	787b      	ldrb	r3, [r7, #1]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba0:	887a      	ldrh	r2, [r7, #2]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	041a      	lsls	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	611a      	str	r2, [r3, #16]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e26c      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8087 	beq.w	8001cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bdc:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d00c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be8:	4b8f      	ldr	r3, [pc, #572]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d112      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
 8001bf4:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d10b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c02:	4b89      	ldr	r3, [pc, #548]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d06c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d168      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e246      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x76>
 8001c24:	4b80      	ldr	r3, [pc, #512]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a7f      	ldr	r2, [pc, #508]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e02e      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x98>
 8001c3a:	4b7b      	ldr	r3, [pc, #492]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a7a      	ldr	r2, [pc, #488]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b78      	ldr	r3, [pc, #480]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a77      	ldr	r2, [pc, #476]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0xbc>
 8001c5e:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a71      	ldr	r2, [pc, #452]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6e      	ldr	r2, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c78:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a6a      	ldr	r2, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fc12 	bl	80014c0 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fc0e 	bl	80014c0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1fa      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe4>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fbfe 	bl	80014c0 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fbfa 	bl	80014c0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1e6      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x10c>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d02:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d11c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x18c>
 8001d0e:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1ba      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4939      	ldr	r1, [pc, #228]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	e03a      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCC_OscConfig+0x270>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fbb3 	bl	80014c0 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fbaf 	bl	80014c0 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e19b      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4927      	ldr	r1, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_RCC_OscConfig+0x270>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fb92 	bl	80014c0 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff fb8e 	bl	80014c0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e17a      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03a      	beq.n	8001e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d019      	beq.n	8001e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fb72 	bl	80014c0 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff fb6e 	bl	80014c0 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e15a      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f000 facc 	bl	800239c <RCC_Delay>
 8001e04:	e01c      	b.n	8001e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fb58 	bl	80014c0 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e14:	f7ff fb54 	bl	80014c0 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d908      	bls.n	8001e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e140      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	42420000 	.word	0x42420000
 8001e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	4b9e      	ldr	r3, [pc, #632]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e9      	bne.n	8001e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a6 	beq.w	8001f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e52:	4b97      	ldr	r3, [pc, #604]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	4b94      	ldr	r3, [pc, #592]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a93      	ldr	r2, [pc, #588]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e68:	61d3      	str	r3, [r2, #28]
 8001e6a:	4b91      	ldr	r3, [pc, #580]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b8e      	ldr	r3, [pc, #568]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b8b      	ldr	r3, [pc, #556]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a8a      	ldr	r2, [pc, #552]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fb15 	bl	80014c0 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7ff fb11 	bl	80014c0 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b64      	cmp	r3, #100	; 0x64
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0fd      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b81      	ldr	r3, [pc, #516]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x312>
 8001ec0:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a7a      	ldr	r2, [pc, #488]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	e02d      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x334>
 8001ed6:	4b76      	ldr	r3, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a75      	ldr	r2, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6213      	str	r3, [r2, #32]
 8001ee2:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a72      	ldr	r2, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	e01c      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x356>
 8001ef8:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a6c      	ldr	r2, [pc, #432]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6213      	str	r3, [r2, #32]
 8001f04:	4b6a      	ldr	r3, [pc, #424]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4a69      	ldr	r2, [pc, #420]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6213      	str	r3, [r2, #32]
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001f12:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a66      	ldr	r2, [pc, #408]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	4b64      	ldr	r3, [pc, #400]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a63      	ldr	r2, [pc, #396]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff fac5 	bl	80014c0 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fac1 	bl	80014c0 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0ab      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ee      	beq.n	8001f3a <HAL_RCC_OscConfig+0x37e>
 8001f5c:	e014      	b.n	8001f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff faaf 	bl	80014c0 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff faab 	bl	80014c0 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e095      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8081 	beq.w	80020a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d061      	beq.n	8002074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d146      	bne.n	8002046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCC_OscConfig+0x4fc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fa7f 	bl	80014c0 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff fa7b 	bl	80014c0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e067      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d108      	bne.n	8002000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fee:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	492d      	ldr	r1, [pc, #180]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002000:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a19      	ldr	r1, [r3, #32]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	430b      	orrs	r3, r1
 8002012:	4927      	ldr	r1, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x4fc>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff fa4f 	bl	80014c0 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff fa4b 	bl	80014c0 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e037      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x46a>
 8002044:	e02f      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <HAL_RCC_OscConfig+0x4fc>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fa38 	bl	80014c0 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff fa34 	bl	80014c0 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e020      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x498>
 8002072:	e018      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e013      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	429a      	cmp	r2, r3
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40007000 	.word	0x40007000
 80020b8:	42420060 	.word	0x42420060

080020bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0d0      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b6a      	ldr	r3, [pc, #424]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4965      	ldr	r1, [pc, #404]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0b8      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800213a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213c:	4b50      	ldr	r3, [pc, #320]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	494d      	ldr	r1, [pc, #308]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d040      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d115      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e07f      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e073      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06b      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4936      	ldr	r1, [pc, #216]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7ff f988 	bl	80014c0 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7ff f984 	bl	80014c0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e053      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d210      	bcs.n	800220c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0207 	bic.w	r2, r3, #7
 80021f2:	4922      	ldr	r1, [pc, #136]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e032      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4916      	ldr	r1, [pc, #88]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	490e      	ldr	r1, [pc, #56]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224a:	f000 f821 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800224e:	4602      	mov	r2, r0
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	490a      	ldr	r1, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	5ccb      	ldrb	r3, [r1, r3]
 800225e:	fa22 f303 	lsr.w	r3, r2, r3
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1cc>)
 8002264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1d0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f8e6 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40022000 	.word	0x40022000
 8002280:	40021000 	.word	0x40021000
 8002284:	08003fac 	.word	0x08003fac
 8002288:	20000034 	.word	0x20000034
 800228c:	2000003c 	.word	0x2000003c

08002290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_RCC_GetSysClockFreq+0x94>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x36>
 80022be:	e027      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_RCC_GetSysClockFreq+0x98>)
 80022c2:	613b      	str	r3, [r7, #16]
      break;
 80022c4:	e027      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d010      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_RCC_GetSysClockFreq+0x94>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0c5b      	lsrs	r3, r3, #17
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
 80022ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f2:	fb02 f203 	mul.w	r2, r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e004      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002304:	fb02 f303 	mul.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	613b      	str	r3, [r7, #16]
      break;
 800230e:	e002      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	613b      	str	r3, [r7, #16]
      break;
 8002314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002316:	693b      	ldr	r3, [r7, #16]
}
 8002318:	4618      	mov	r0, r3
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	007a1200 	.word	0x007a1200
 800232c:	08003fc4 	.word	0x08003fc4
 8002330:	08003fd4 	.word	0x08003fd4
 8002334:	003d0900 	.word	0x003d0900

08002338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800233c:	4b02      	ldr	r3, [pc, #8]	; (8002348 <HAL_RCC_GetHCLKFreq+0x10>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	20000034 	.word	0x20000034

0800234c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002350:	f7ff fff2 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4903      	ldr	r1, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	08003fbc 	.word	0x08003fbc

08002374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002378:	f7ff ffde 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0adb      	lsrs	r3, r3, #11
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4903      	ldr	r1, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	08003fbc 	.word	0x08003fbc

0800239c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <RCC_Delay+0x34>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <RCC_Delay+0x38>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0a5b      	lsrs	r3, r3, #9
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b8:	bf00      	nop
  }
  while (Delay --);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	60fa      	str	r2, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f9      	bne.n	80023b8 <RCC_Delay+0x1c>
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	20000034 	.word	0x20000034
 80023d4:	10624dd3 	.word	0x10624dd3

080023d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e041      	b.n	800246e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe fdd4 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f000 fc30 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d001      	beq.n	8002490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e03a      	b.n	8002506 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a18      	ldr	r2, [pc, #96]	; (8002510 <HAL_TIM_Base_Start_IT+0x98>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00e      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x58>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ba:	d009      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x58>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <HAL_TIM_Base_Start_IT+0x9c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x58>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a13      	ldr	r2, [pc, #76]	; (8002518 <HAL_TIM_Base_Start_IT+0xa0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d010      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	e007      	b.n	8002504 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	40012c00 	.word	0x40012c00
 8002514:	40000400 	.word	0x40000400
 8002518:	40000800 	.word	0x40000800

0800251c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e041      	b.n	80025b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f839 	bl	80025ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 fb8e 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_TIM_PWM_Start+0x24>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	bf14      	ite	ne
 80025e8:	2301      	movne	r3, #1
 80025ea:	2300      	moveq	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e022      	b.n	8002636 <HAL_TIM_PWM_Start+0x6a>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d109      	bne.n	800260a <HAL_TIM_PWM_Start+0x3e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	e015      	b.n	8002636 <HAL_TIM_PWM_Start+0x6a>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d109      	bne.n	8002624 <HAL_TIM_PWM_Start+0x58>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b01      	cmp	r3, #1
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e008      	b.n	8002636 <HAL_TIM_PWM_Start+0x6a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e05e      	b.n	80026fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d104      	bne.n	800264e <HAL_TIM_PWM_Start+0x82>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800264c:	e013      	b.n	8002676 <HAL_TIM_PWM_Start+0xaa>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d104      	bne.n	800265e <HAL_TIM_PWM_Start+0x92>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800265c:	e00b      	b.n	8002676 <HAL_TIM_PWM_Start+0xaa>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d104      	bne.n	800266e <HAL_TIM_PWM_Start+0xa2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800266c:	e003      	b.n	8002676 <HAL_TIM_PWM_Start+0xaa>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	6839      	ldr	r1, [r7, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fd7c 	bl	800317c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <HAL_TIM_PWM_Start+0x138>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d107      	bne.n	800269e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_TIM_PWM_Start+0x138>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <HAL_TIM_PWM_Start+0xfa>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d009      	beq.n	80026c6 <HAL_TIM_PWM_Start+0xfa>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_TIM_PWM_Start+0x13c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_TIM_PWM_Start+0xfa>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_TIM_PWM_Start+0x140>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d111      	bne.n	80026ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d010      	beq.n	80026fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e8:	e007      	b.n	80026fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800

08002710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d122      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d11b      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0202 	mvn.w	r2, #2
 800273c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa76 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa69 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fa78 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0204 	mvn.w	r2, #4
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa4c 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa3f 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fa4e 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0208 	mvn.w	r2, #8
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2204      	movs	r2, #4
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa22 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa15 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fa24 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b10      	cmp	r3, #16
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0210 	mvn.w	r2, #16
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2208      	movs	r2, #8
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f9f8 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f9eb 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f9fa 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0201 	mvn.w	r2, #1
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fb32 	bl	8000ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b80      	cmp	r3, #128	; 0x80
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fce9 	bl	8003292 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d10e      	bne.n	80028ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d107      	bne.n	80028ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f9be 	bl	8002c68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d10e      	bne.n	8002918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b20      	cmp	r3, #32
 8002906:	d107      	bne.n	8002918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0220 	mvn.w	r2, #32
 8002910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fcb4 	bl	8003280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800293a:	2302      	movs	r3, #2
 800293c:	e0ae      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0c      	cmp	r3, #12
 800294a:	f200 809f 	bhi.w	8002a8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002989 	.word	0x08002989
 8002958:	08002a8d 	.word	0x08002a8d
 800295c:	08002a8d 	.word	0x08002a8d
 8002960:	08002a8d 	.word	0x08002a8d
 8002964:	080029c9 	.word	0x080029c9
 8002968:	08002a8d 	.word	0x08002a8d
 800296c:	08002a8d 	.word	0x08002a8d
 8002970:	08002a8d 	.word	0x08002a8d
 8002974:	08002a0b 	.word	0x08002a0b
 8002978:	08002a8d 	.word	0x08002a8d
 800297c:	08002a8d 	.word	0x08002a8d
 8002980:	08002a8d 	.word	0x08002a8d
 8002984:	08002a4b 	.word	0x08002a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f9d6 	bl	8002d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0204 	bic.w	r2, r2, #4
 80029b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6999      	ldr	r1, [r3, #24]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	619a      	str	r2, [r3, #24]
      break;
 80029c6:	e064      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fa1c 	bl	8002e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6999      	ldr	r1, [r3, #24]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	021a      	lsls	r2, r3, #8
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	619a      	str	r2, [r3, #24]
      break;
 8002a08:	e043      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fa65 	bl	8002ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0208 	orr.w	r2, r2, #8
 8002a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0204 	bic.w	r2, r2, #4
 8002a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69d9      	ldr	r1, [r3, #28]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	61da      	str	r2, [r3, #28]
      break;
 8002a48:	e023      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 faaf 	bl	8002fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69d9      	ldr	r1, [r3, #28]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	021a      	lsls	r2, r3, #8
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	61da      	str	r2, [r3, #28]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e0b4      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x186>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af8:	d03e      	beq.n	8002b78 <HAL_TIM_ConfigClockSource+0xd4>
 8002afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afe:	f200 8087 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b06:	f000 8086 	beq.w	8002c16 <HAL_TIM_ConfigClockSource+0x172>
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	d87f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b70      	cmp	r3, #112	; 0x70
 8002b12:	d01a      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xa6>
 8002b14:	2b70      	cmp	r3, #112	; 0x70
 8002b16:	d87b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b60      	cmp	r3, #96	; 0x60
 8002b1a:	d050      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x11a>
 8002b1c:	2b60      	cmp	r3, #96	; 0x60
 8002b1e:	d877      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b50      	cmp	r3, #80	; 0x50
 8002b22:	d03c      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0xfa>
 8002b24:	2b50      	cmp	r3, #80	; 0x50
 8002b26:	d873      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d058      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x13a>
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d86f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b30      	cmp	r3, #48	; 0x30
 8002b32:	d064      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b30      	cmp	r3, #48	; 0x30
 8002b36:	d86b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d060      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d867      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05c      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d05a      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b48:	e062      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f000 faf0 	bl	800313e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	609a      	str	r2, [r3, #8]
      break;
 8002b76:	e04f      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f000 fad9 	bl	800313e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b9a:	609a      	str	r2, [r3, #8]
      break;
 8002b9c:	e03c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f000 fa50 	bl	8003050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2150      	movs	r1, #80	; 0x50
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 faa7 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e02c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f000 fa6e 	bl	80030ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2160      	movs	r1, #96	; 0x60
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fa97 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002bdc:	e01c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f000 fa30 	bl	8003050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2140      	movs	r1, #64	; 0x40
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fa87 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e00c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f000 fa7e 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002c0e:	e003      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e000      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00b      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d007      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <TIM_Base_SetConfig+0xbc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00b      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d007      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <TIM_Base_SetConfig+0xbc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	615a      	str	r2, [r3, #20]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800

08002d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f023 0201 	bic.w	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 0302 	bic.w	r3, r3, #2
 8002d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <TIM_OC1_SetConfig+0xc8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10c      	bne.n	8002db6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0308 	bic.w	r3, r3, #8
 8002da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <TIM_OC1_SetConfig+0xc8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d111      	bne.n	8002de2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	621a      	str	r2, [r3, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40012c00 	.word	0x40012c00

08002e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f023 0210 	bic.w	r2, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f023 0320 	bic.w	r3, r3, #32
 8002e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <TIM_OC2_SetConfig+0xd0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d10d      	bne.n	8002e88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <TIM_OC2_SetConfig+0xd0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d113      	bne.n	8002eb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	40012c00 	.word	0x40012c00

08002ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0303 	bic.w	r3, r3, #3
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <TIM_OC3_SetConfig+0xd0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10d      	bne.n	8002f5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <TIM_OC3_SetConfig+0xd0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d113      	bne.n	8002f8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	621a      	str	r2, [r3, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00

08002fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	031b      	lsls	r3, r3, #12
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0f      	ldr	r2, [pc, #60]	; (800304c <TIM_OC4_SetConfig+0x98>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d109      	bne.n	8003028 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800301a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	621a      	str	r2, [r3, #32]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	40012c00 	.word	0x40012c00

08003050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 0201 	bic.w	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800307a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 030a 	bic.w	r3, r3, #10
 800308c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f023 0210 	bic.w	r2, r3, #16
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	031b      	lsls	r3, r3, #12
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	f043 0307 	orr.w	r3, r3, #7
 800312c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800313e:	b480      	push	{r7}
 8003140:	b087      	sub	sp, #28
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003158:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	021a      	lsls	r2, r3, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	431a      	orrs	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4313      	orrs	r3, r2
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	609a      	str	r2, [r3, #8]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2201      	movs	r2, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	43db      	mvns	r3, r3
 800319e:	401a      	ands	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d8:	2302      	movs	r3, #2
 80031da:	e046      	b.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a16      	ldr	r2, [pc, #88]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d009      	beq.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a10      	ldr	r2, [pc, #64]	; (800327c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10c      	bne.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4313      	orrs	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800

08003280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e042      	b.n	800333c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fee0 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2224      	movs	r2, #36	; 0x24
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fd71 	bl	8003dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800330c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800331c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b20      	cmp	r3, #32
 8003362:	d16d      	bne.n	8003440 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_UART_Transmit+0x2c>
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e066      	b.n	8003442 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2221      	movs	r2, #33	; 0x21
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003382:	f7fe f89d 	bl	80014c0 <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	88fa      	ldrh	r2, [r7, #6]
 800338c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	88fa      	ldrh	r2, [r7, #6]
 8003392:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339c:	d108      	bne.n	80033b0 <HAL_UART_Transmit+0x6c>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e003      	b.n	80033b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033b8:	e02a      	b.n	8003410 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2180      	movs	r1, #128	; 0x80
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 faf9 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e036      	b.n	8003442 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10b      	bne.n	80033f2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	3302      	adds	r3, #2
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	e007      	b.n	8003402 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	3301      	adds	r3, #1
 8003400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1cf      	bne.n	80033ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2200      	movs	r2, #0
 8003422:	2140      	movs	r1, #64	; 0x40
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fac9 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e006      	b.n	8003442 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b0ba      	sub	sp, #232	; 0xe8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800348a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10f      	bne.n	80034b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_UART_IRQHandler+0x66>
 800349e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fbd1 	bl	8003c52 <UART_Receive_IT>
      return;
 80034b0:	e25b      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80de 	beq.w	8003678 <HAL_UART_IRQHandler+0x22c>
 80034bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80d1 	beq.w	8003678 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <HAL_UART_IRQHandler+0xae>
 80034e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_UART_IRQHandler+0xd2>
 8003506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_UART_IRQHandler+0xf6>
 800352a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d011      	beq.n	8003572 <HAL_UART_IRQHandler+0x126>
 800354e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d105      	bne.n	8003566 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800355a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0208 	orr.w	r2, r3, #8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 81f2 	beq.w	8003960 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_UART_IRQHandler+0x14e>
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb5c 	bl	8003c52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d103      	bne.n	80035c6 <HAL_UART_IRQHandler+0x17a>
 80035be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d04f      	beq.n	8003666 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa66 	bl	8003a98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d041      	beq.n	800365e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3314      	adds	r3, #20
 8003602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003606:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800360a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800361e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1d9      	bne.n	80035da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d013      	beq.n	8003656 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	4a7e      	ldr	r2, [pc, #504]	; (800382c <HAL_UART_IRQHandler+0x3e0>)
 8003634:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe f892 	bl	8001764 <HAL_DMA_Abort_IT>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003650:	4610      	mov	r0, r2
 8003652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e00e      	b.n	8003674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f99c 	bl	8003994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	e00a      	b.n	8003674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f998 	bl	8003994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	e006      	b.n	8003674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f994 	bl	8003994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003672:	e175      	b.n	8003960 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	bf00      	nop
    return;
 8003676:	e173      	b.n	8003960 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 814f 	bne.w	8003920 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8148 	beq.w	8003920 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8141 	beq.w	8003920 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80b6 	beq.w	8003830 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8145 	beq.w	8003964 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036e2:	429a      	cmp	r2, r3
 80036e4:	f080 813e 	bcs.w	8003964 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	f000 8088 	beq.w	800380c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	330c      	adds	r3, #12
 8003702:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003728:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800372c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003734:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1d9      	bne.n	80036fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3314      	adds	r3, #20
 8003768:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800376c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003770:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003772:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003774:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800377e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e1      	bne.n	8003748 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e3      	bne.n	8003784 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037dc:	f023 0310 	bic.w	r3, r3, #16
 80037e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80037ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80037f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e3      	bne.n	80037ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd ff71 	bl	80016ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800381a:	b29b      	uxth	r3, r3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	b29b      	uxth	r3, r3
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8bf 	bl	80039a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003828:	e09c      	b.n	8003964 <HAL_UART_IRQHandler+0x518>
 800382a:	bf00      	nop
 800382c:	08003b5d 	.word	0x08003b5d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003838:	b29b      	uxth	r3, r3
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 808e 	beq.w	8003968 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800384c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8089 	beq.w	8003968 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800386c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800387a:	647a      	str	r2, [r7, #68]	; 0x44
 800387c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e3      	bne.n	8003856 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3314      	adds	r3, #20
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	623b      	str	r3, [r7, #32]
   return(result);
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038b2:	633a      	str	r2, [r7, #48]	; 0x30
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e3      	bne.n	800388e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0310 	bic.w	r3, r3, #16
 80038ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038f8:	61fa      	str	r2, [r7, #28]
 80038fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	617b      	str	r3, [r7, #20]
   return(result);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e3      	bne.n	80038d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f844 	bl	80039a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800391e:	e023      	b.n	8003968 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <HAL_UART_IRQHandler+0x4f4>
 800392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f923 	bl	8003b84 <UART_Transmit_IT>
    return;
 800393e:	e014      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <HAL_UART_IRQHandler+0x51e>
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f962 	bl	8003c22 <UART_EndTransmit_IT>
    return;
 800395e:	e004      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
    return;
 8003960:	bf00      	nop
 8003962:	e002      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
      return;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
      return;
 8003968:	bf00      	nop
  }
}
 800396a:	37e8      	adds	r7, #232	; 0xe8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b090      	sub	sp, #64	; 0x40
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039cc:	e050      	b.n	8003a70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d04c      	beq.n	8003a70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <UART_WaitOnFlagUntilTimeout+0x30>
 80039dc:	f7fd fd70 	bl	80014c0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d241      	bcs.n	8003a70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	330c      	adds	r3, #12
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a0c:	637a      	str	r2, [r7, #52]	; 0x34
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e5      	bne.n	80039ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3314      	adds	r3, #20
 8003a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3314      	adds	r3, #20
 8003a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a40:	623a      	str	r2, [r7, #32]
 8003a42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	69f9      	ldr	r1, [r7, #28]
 8003a46:	6a3a      	ldr	r2, [r7, #32]
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e5      	bne.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e00f      	b.n	8003a90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d09f      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3740      	adds	r7, #64	; 0x40
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b095      	sub	sp, #84	; 0x54
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ac0:	643a      	str	r2, [r7, #64]	; 0x40
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e5      	bne.n	8003aa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3314      	adds	r3, #20
 8003ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3314      	adds	r3, #20
 8003af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e5      	bne.n	8003ad4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d119      	bne.n	8003b44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0310 	bic.w	r3, r3, #16
 8003b26:	647b      	str	r3, [r7, #68]	; 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b30:	61ba      	str	r2, [r7, #24]
 8003b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6979      	ldr	r1, [r7, #20]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e5      	bne.n	8003b10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b52:	bf00      	nop
 8003b54:	3754      	adds	r7, #84	; 0x54
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff ff0c 	bl	8003994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b21      	cmp	r3, #33	; 0x21
 8003b96:	d13e      	bne.n	8003c16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba0:	d114      	bne.n	8003bcc <UART_Transmit_IT+0x48>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d110      	bne.n	8003bcc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	1c9a      	adds	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	621a      	str	r2, [r3, #32]
 8003bca:	e008      	b.n	8003bde <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	1c59      	adds	r1, r3, #1
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6211      	str	r1, [r2, #32]
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4619      	mov	r1, r3
 8003bec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
  }
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fe94 	bl	8003970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b08c      	sub	sp, #48	; 0x30
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b22      	cmp	r3, #34	; 0x22
 8003c64:	f040 80ae 	bne.w	8003dc4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	d117      	bne.n	8003ca2 <UART_Receive_IT+0x50>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d113      	bne.n	8003ca2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca0:	e026      	b.n	8003cf0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	d007      	beq.n	8003cc6 <UART_Receive_IT+0x74>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <UART_Receive_IT+0x82>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e008      	b.n	8003ce6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d15d      	bne.n	8003dc0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0220 	bic.w	r2, r2, #32
 8003d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d135      	bne.n	8003db6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f023 0310 	bic.w	r3, r3, #16
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	623a      	str	r2, [r7, #32]
 8003d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	69f9      	ldr	r1, [r7, #28]
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d10a      	bne.n	8003da8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fdf9 	bl	80039a6 <HAL_UARTEx_RxEventCallback>
 8003db4:	e002      	b.n	8003dbc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fde3 	bl	8003982 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e002      	b.n	8003dc6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3730      	adds	r7, #48	; 0x30
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e0a:	f023 030c 	bic.w	r3, r3, #12
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <UART_SetConfig+0x114>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d103      	bne.n	8003e40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7fe fa9c 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	e002      	b.n	8003e46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7fe fa84 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8003e44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009a      	lsls	r2, r3, #2
 8003e50:	441a      	add	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <UART_SetConfig+0x118>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	0119      	lsls	r1, r3, #4
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009a      	lsls	r2, r3, #2
 8003e70:	441a      	add	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <UART_SetConfig+0x118>)
 8003e7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	2064      	movs	r0, #100	; 0x64
 8003e86:	fb00 f303 	mul.w	r3, r0, r3
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	3332      	adds	r3, #50	; 0x32
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <UART_SetConfig+0x118>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9c:	4419      	add	r1, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009a      	lsls	r2, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <UART_SetConfig+0x118>)
 8003eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2064      	movs	r0, #100	; 0x64
 8003ebe:	fb00 f303 	mul.w	r3, r0, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	3332      	adds	r3, #50	; 0x32
 8003ec8:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <UART_SetConfig+0x118>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	440a      	add	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40013800 	.word	0x40013800
 8003ee8:	51eb851f 	.word	0x51eb851f

08003eec <__libc_init_array>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	2600      	movs	r6, #0
 8003ef0:	4d0c      	ldr	r5, [pc, #48]	; (8003f24 <__libc_init_array+0x38>)
 8003ef2:	4c0d      	ldr	r4, [pc, #52]	; (8003f28 <__libc_init_array+0x3c>)
 8003ef4:	1b64      	subs	r4, r4, r5
 8003ef6:	10a4      	asrs	r4, r4, #2
 8003ef8:	42a6      	cmp	r6, r4
 8003efa:	d109      	bne.n	8003f10 <__libc_init_array+0x24>
 8003efc:	f000 f822 	bl	8003f44 <_init>
 8003f00:	2600      	movs	r6, #0
 8003f02:	4d0a      	ldr	r5, [pc, #40]	; (8003f2c <__libc_init_array+0x40>)
 8003f04:	4c0a      	ldr	r4, [pc, #40]	; (8003f30 <__libc_init_array+0x44>)
 8003f06:	1b64      	subs	r4, r4, r5
 8003f08:	10a4      	asrs	r4, r4, #2
 8003f0a:	42a6      	cmp	r6, r4
 8003f0c:	d105      	bne.n	8003f1a <__libc_init_array+0x2e>
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f14:	4798      	blx	r3
 8003f16:	3601      	adds	r6, #1
 8003f18:	e7ee      	b.n	8003ef8 <__libc_init_array+0xc>
 8003f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1e:	4798      	blx	r3
 8003f20:	3601      	adds	r6, #1
 8003f22:	e7f2      	b.n	8003f0a <__libc_init_array+0x1e>
 8003f24:	08003fd8 	.word	0x08003fd8
 8003f28:	08003fd8 	.word	0x08003fd8
 8003f2c:	08003fd8 	.word	0x08003fd8
 8003f30:	08003fdc 	.word	0x08003fdc

08003f34 <memset>:
 8003f34:	4603      	mov	r3, r0
 8003f36:	4402      	add	r2, r0
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d100      	bne.n	8003f3e <memset+0xa>
 8003f3c:	4770      	bx	lr
 8003f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f42:	e7f9      	b.n	8003f38 <memset+0x4>

08003f44 <_init>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr

08003f50 <_fini>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	bf00      	nop
 8003f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f56:	bc08      	pop	{r3}
 8003f58:	469e      	mov	lr, r3
 8003f5a:	4770      	bx	lr
